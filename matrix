***Here is the detailed question and answer of matrix:
//Spiral traversal of matrix:

***
void spiralTraversal(const vector<vector<int>>& matrix) {
    if (matrix.empty()) return;

    int top = 0, bottom = matrix.size() - 1;
    int left = 0, right = matrix[0].size() - 1;

    while (top <= bottom && left <= right) {
        // Traverse from left to right on the top row
        for (int i = left; i <= right; i++) {
            cout << matrix[top][i] << " ";
        }
        top++;

        // Traverse from top to bottom on the right column
        for (int i = top; i <= bottom; i++) {
            cout << matrix[i][right] << " ";
        }
        right--;

        // Check if there are still rows and columns left to traverse
        if (top <= bottom) {
            // Traverse from right to left on the bottom row
            for (int i = right; i >= left; i--) {
                cout << matrix[bottom][i] << " ";
            }
            bottom--;
        }

        if (left <= right) {
            // Traverse from bottom to top on the left column
            for (int i = bottom; i >= top; i--) {
                cout << matrix[i][left] << " ";
            }
            left++;
        }
    }
    cout << endl;
}


**** search in sorted matrix:*********** pending and have to study**

***Rows with max ones***** pending and have to study

***sort the matrix completely from beginging to end:****** //here keep the matrix element in new vector array created by me:

void sortMatrix(vector<vector<int>>& matrix) {
    int rows = matrix.size();
    int cols = matrix[0].size();
    
    // Step 1: Flatten the matrix into a 1D array
    vector<int> flattened;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            flattened.push_back(matrix[i][j]);
        }
    }

    // Step 2: Sort the flattened array
    sort(flattened.begin(), flattened.end());

    // Step 3: Fill the matrix back with sorted values
    int index = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = flattened[index++];
        }
    }
}

****Max area rectangle problem need to be covered:******* pending
***rotate matrix by 90 degree this problem can be done esily:******
****common in 3 sorted array****** this is esay and can be done easily:


